function makeBlock(a){var b=Array.prototype.slice.call(arguments,1);return function(){return a.apply(this,b)}}function thrower(a){throw new a("test")}var assert=require("./"),keys=Object.keys;test("assert.ok",function(){assert["throws"](makeBlock(assert,!1),assert.AssertionError,"ok(false)"),assert.doesNotThrow(makeBlock(assert,!0),assert.AssertionError,"ok(true)"),assert.doesNotThrow(makeBlock(assert,"test","ok('test')")),assert["throws"](makeBlock(assert.ok,!1),assert.AssertionError,"ok(false)"),assert.doesNotThrow(makeBlock(assert.ok,!0),assert.AssertionError,"ok(true)"),assert.doesNotThrow(makeBlock(assert.ok,"test"),"ok('test')")}),test("assert.equal",function(){assert["throws"](makeBlock(assert.equal,!0,!1),assert.AssertionError,"equal"),assert.doesNotThrow(makeBlock(assert.equal,null,null),"equal"),assert.doesNotThrow(makeBlock(assert.equal,void 0,void 0),"equal"),assert.doesNotThrow(makeBlock(assert.equal,null,void 0),"equal"),assert.doesNotThrow(makeBlock(assert.equal,!0,!0),"equal"),assert.doesNotThrow(makeBlock(assert.equal,2,"2"),"equal"),assert.doesNotThrow(makeBlock(assert.notEqual,!0,!1),"notEqual"),assert["throws"](makeBlock(assert.notEqual,!0,!0),assert.AssertionError,"notEqual")}),test("assert.strictEqual",function(){assert["throws"](makeBlock(assert.strictEqual,2,"2"),assert.AssertionError,"strictEqual"),assert["throws"](makeBlock(assert.strictEqual,null,void 0),assert.AssertionError,"strictEqual"),assert.doesNotThrow(makeBlock(assert.notStrictEqual,2,"2"),"notStrictEqual")}),test("assert.deepEqual - 7.2",function(){assert.doesNotThrow(makeBlock(assert.deepEqual,new Date(2e3,3,14),new Date(2e3,3,14)),"deepEqual date"),assert["throws"](makeBlock(assert.deepEqual,new Date,new Date(2e3,3,14)),assert.AssertionError,"deepEqual date")}),test("assert.deepEqual - 7.3",function(){assert.doesNotThrow(makeBlock(assert.deepEqual,/a/,/a/)),assert.doesNotThrow(makeBlock(assert.deepEqual,/a/g,/a/g)),assert.doesNotThrow(makeBlock(assert.deepEqual,/a/i,/a/i)),assert.doesNotThrow(makeBlock(assert.deepEqual,/a/m,/a/m)),assert.doesNotThrow(makeBlock(assert.deepEqual,/a/gim,/a/gim)),assert["throws"](makeBlock(assert.deepEqual,/ab/,/a/)),assert["throws"](makeBlock(assert.deepEqual,/a/g,/a/)),assert["throws"](makeBlock(assert.deepEqual,/a/i,/a/)),assert["throws"](makeBlock(assert.deepEqual,/a/m,/a/)),assert["throws"](makeBlock(assert.deepEqual,/a/gim,/a/im));var a=/a/;a.lastIndex=3,assert["throws"](makeBlock(assert.deepEqual,a,/a/))}),test("assert.deepEqual - 7.4",function(){assert.doesNotThrow(makeBlock(assert.deepEqual,4,"4"),"deepEqual == check"),assert.doesNotThrow(makeBlock(assert.deepEqual,!0,1),"deepEqual == check"),assert["throws"](makeBlock(assert.deepEqual,4,"5"),assert.AssertionError,"deepEqual == check")}),test("assert.deepEqual - 7.5",function(){assert.doesNotThrow(makeBlock(assert.deepEqual,{a:4},{a:4})),assert.doesNotThrow(makeBlock(assert.deepEqual,{a:4,b:"2"},{a:4,b:"2"})),assert.doesNotThrow(makeBlock(assert.deepEqual,[4],["4"])),assert["throws"](makeBlock(assert.deepEqual,{a:4},{a:4,b:!0}),assert.AssertionError),assert.doesNotThrow(makeBlock(assert.deepEqual,["a"],{0:"a"})),assert.doesNotThrow(makeBlock(assert.deepEqual,{a:4,b:"1"},{b:"1",a:4}));var a=[1,2,3],b=[1,2,3];a.a="test",a.b=!0,b.b=!0,b.a="test",assert["throws"](makeBlock(assert.deepEqual,keys(a),keys(b)),assert.AssertionError),assert.doesNotThrow(makeBlock(assert.deepEqual,a,b))}),test("assert.deepEqual - instances",function(){function a(a,b){return this.first=a,this.last=b,this}function b(a,b){return this.first=a,this.last=b,this}var c={toString:function(){return this.first+" "+this.last}};a.prototype=c,b.prototype=c;var d=new a("Ryan","Dahl"),e=new b("Ryan","Dahl");assert.doesNotThrow(makeBlock(assert.deepEqual,d,e)),b.prototype=Object,e=new b("Ryan","Dahl"),assert["throws"](makeBlock(assert.deepEqual,d,e),assert.AssertionError)}),test("assert.deepEqual - ES6 primitives",function(){assert["throws"](makeBlock(assert.deepEqual,null,{}),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,void 0,{}),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,"a",["a"]),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,"a",{0:"a"}),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,1,{}),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,!0,{}),assert.AssertionError),"symbol"==typeof Symbol&&assert["throws"](makeBlock(assert.deepEqual,Symbol(),{}),assert.AssertionError)}),test("assert.deepEqual - object wrappers",function(){assert.doesNotThrow(makeBlock(assert.deepEqual,new String("a"),["a"])),assert.doesNotThrow(makeBlock(assert.deepEqual,new String("a"),{0:"a"})),assert.doesNotThrow(makeBlock(assert.deepEqual,new Number(1),{})),assert.doesNotThrow(makeBlock(assert.deepEqual,new Boolean(!0),{}))}),test("assert - Testing the throwing",function(){var a=makeBlock(thrower,assert.AssertionError);a=makeBlock(thrower,assert.AssertionError),assert["throws"](makeBlock(thrower,assert.AssertionError),assert.AssertionError,"message"),assert["throws"](makeBlock(thrower,assert.AssertionError),assert.AssertionError),assert["throws"](makeBlock(thrower,assert.AssertionError)),assert["throws"](makeBlock(thrower,TypeError));var b=!1;try{assert["throws"](makeBlock(thrower,TypeError),assert.AssertionError)}catch(c){b=!0,assert.ok(c instanceof TypeError,"type")}assert.equal(!0,b,"a.throws with an explicit error is eating extra errors",assert.AssertionError),b=!1;try{assert.doesNotThrow(makeBlock(thrower,TypeError),assert.AssertionError)}catch(c){b=!0,assert.ok(c instanceof TypeError)}assert.equal(!0,b,"a.doesNotThrow with an explicit error is eating extra errors");try{assert.doesNotThrow(makeBlock(thrower,TypeError),TypeError)}catch(c){b=!0,assert.ok(c instanceof assert.AssertionError)}assert.equal(!0,b,"a.doesNotThrow is not catching type matching errors")}),test("assert.ifError",function(){assert["throws"](function(){assert.ifError(new Error("test error"))}),assert.doesNotThrow(function(){assert.ifError(null)}),assert.doesNotThrow(function(){assert.ifError()})}),test("assert - make sure that validating using constructor really works",function(){var a=!1;try{assert["throws"](function(){throw{}},Array)}catch(b){a=!0}assert.ok(a,"wrong constructor validation")}),test("assert -  use a RegExp to validate error message",function(){assert["throws"](makeBlock(thrower,TypeError),/test/)}),test("assert - se a fn to validate error object",function(){assert["throws"](makeBlock(thrower,TypeError),function(a){return a instanceof TypeError&&/test/.test(a)?!0:void 0})}),test("assert - Make sure deepEqual doesn't loop forever on circular refs",function(){var a={};a.b=a;var b={};b.b=b;var c=!1;try{assert.deepEqual(a,b)}catch(d){c=!0}assert.ok(c)}),test("assert - Ensure reflexivity of deepEqual with `arguments` objects",function(){var a=function(){return arguments}();assert["throws"](makeBlock(assert.deepEqual,[],a),assert.AssertionError),assert["throws"](makeBlock(assert.deepEqual,a,[]),assert.AssertionError)}),test("assert - test assertion message",function(){function a(a,b){try{assert.equal(a,"")}catch(c){assert.equal(c.toString(),["AssertionError:",b,"==",'""'].join(" "))}}a(void 0,'"undefined"'),a(null,"null"),a(!0,"true"),a(!1,"false"),a(0,"0"),a(100,"100"),a(NaN,'"NaN"'),a(1/0,'"Infinity"'),a(-(1/0),'"-Infinity"'),a("",'""'),a("foo",'"foo"'),a([],"[]"),a([1,2,3],"[1,2,3]"),a(/a/,'"/a/"'),a(function(){},'"function f() {}"'),a({},"{}"),a({a:void 0,b:null},'{"a":"undefined","b":null}'),a({a:NaN,b:1/0,c:-(1/0)},'{"a":"NaN","b":"Infinity","c":"-Infinity"}')}),test("assert - regressions from node.js testcase",function(){var a=!1;try{assert["throws"](function(){assert.ifError(null)})}catch(b){a=!0,assert.equal(b.message,"Missing expected exception..")}assert.ok(a);try{assert.equal(1,2)}catch(b){assert.equal(b.toString().split("\n")[0],"AssertionError: 1 == 2")}try{assert.equal(1,2,"oh no")}catch(b){assert.equal(b.toString().split("\n")[0],"AssertionError: oh no")}});